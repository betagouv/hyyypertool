generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model moderations {
  id              Int           @id @default(autoincrement())
  user_id         Int
  organization_id Int
  type            String        @db.VarChar
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  moderated_at    DateTime?     @db.Timestamptz(6)
  comment         String?       @db.VarChar
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model oidc_clients {
  id                                Int                  @id @default(autoincrement())
  client_name                       String               @db.VarChar
  client_id                         String               @db.VarChar
  client_secret                     String               @db.VarChar
  redirect_uris                     String[]             @default([]) @db.VarChar
  created_at                        DateTime             @default(now()) @db.Timestamptz(6)
  updated_at                        DateTime             @default(now()) @db.Timestamptz(6)
  post_logout_redirect_uris         String[]             @default([]) @db.VarChar
  scope                             String               @default("openid email") @db.VarChar
  client_uri                        String?              @db.VarChar
  client_description                String?              @db.VarChar
  userinfo_signed_response_alg      String?              @db.VarChar
  id_token_signed_response_alg      String?              @db.VarChar
  authorization_signed_response_alg String?              @db.VarChar
  introspection_signed_response_alg String?              @db.VarChar
  users_oidc_clients                users_oidc_clients[]
}

model organizations {
  id                                    Int                   @id @default(autoincrement())
  siret                                 String                @unique(map: "index_organizations_on_siret") @db.VarChar
  authorized_email_domains              String[]              @default([]) @db.VarChar
  external_authorized_email_domains     String[]              @default([]) @db.VarChar
  created_at                            DateTime              @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone")) @db.Timestamptz(6)
  updated_at                            DateTime              @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone")) @db.Timestamptz(6)
  cached_libelle                        String?               @db.VarChar
  cached_nom_complet                    String?               @db.VarChar
  cached_enseigne                       String?               @db.VarChar
  cached_tranche_effectifs              String?               @db.VarChar
  cached_tranche_effectifs_unite_legale String?               @db.VarChar
  cached_libelle_tranche_effectif       String?               @db.VarChar
  cached_etat_administratif             String?               @db.VarChar
  cached_est_active                     Boolean?
  cached_statut_diffusion               String?               @db.VarChar
  cached_est_diffusible                 Boolean?
  cached_adresse                        String?               @db.VarChar
  cached_code_postal                    String?               @db.VarChar
  cached_activite_principale            String?               @db.VarChar
  cached_libelle_activite_principale    String?               @db.VarChar
  cached_categorie_juridique            String?               @db.VarChar
  cached_libelle_categorie_juridique    String?               @db.VarChar
  organization_info_fetched_at          DateTime?             @db.Timestamptz(6)
  verified_email_domains                String[]              @default([]) @db.VarChar
  cached_code_officiel_geographique     String?               @db.VarChar
  moderations                           moderations[]
  users_oidc_clients                    users_oidc_clients[]
  users_organizations                   users_organizations[]
}

model pgmigrations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  run_on DateTime @db.Timestamp(6)
}

model users {
  id                                                        Int                   @id @default(autoincrement())
  email                                                     String                @unique(map: "index_users_on_email") @default("") @db.VarChar
  encrypted_password                                        String?               @default("") @db.VarChar
  reset_password_token                                      String?               @unique(map: "index_users_on_reset_password_token") @db.VarChar
  reset_password_sent_at                                    DateTime?             @db.Timestamptz(6)
  sign_in_count                                             Int                   @default(0)
  last_sign_in_at                                           DateTime?             @db.Timestamptz(6)
  created_at                                                DateTime              @db.Timestamptz(6)
  updated_at                                                DateTime              @db.Timestamptz(6)
  legacy_user                                               Boolean               @default(false)
  email_verified                                            Boolean               @default(false)
  verify_email_token                                        String?               @db.VarChar
  verify_email_sent_at                                      DateTime?             @db.Timestamptz(6)
  given_name                                                String?               @db.VarChar
  family_name                                               String?               @db.VarChar
  phone_number                                              String?               @db.VarChar
  job                                                       String?               @db.VarChar
  magic_link_token                                          String?               @db.VarChar
  magic_link_sent_at                                        DateTime?             @db.Timestamptz(6)
  email_verified_at                                         DateTime?             @db.Timestamptz(6)
  moderations                                               moderations[]
  users_oidc_clients                                        users_oidc_clients[]
  users_organizations_users_organizations_sponsor_idTousers users_organizations[] @relation("users_organizations_sponsor_idTousers")
  users_organizations_users_organizations_user_idTousers    users_organizations[] @relation("users_organizations_user_idTousers")
}

model users_oidc_clients {
  user_id         Int
  oidc_client_id  Int
  created_at      DateTime       @db.Timestamptz(6)
  updated_at      DateTime       @db.Timestamptz(6)
  id              Int            @id @default(autoincrement())
  organization_id Int?
  oidc_clients    oidc_clients   @relation(fields: [oidc_client_id], references: [id], onDelete: Cascade)
  organizations   organizations? @relation(fields: [organization_id], references: [id])
  users           users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users_organizations {
  user_id                                     Int
  organization_id                             Int
  is_external                                 Boolean       @default(false)
  created_at                                  DateTime      @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone")) @db.Timestamptz(6)
  updated_at                                  DateTime      @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone")) @db.Timestamptz(6)
  verification_type                           String?       @db.VarChar
  authentication_by_peers_type                String?       @db.VarChar
  has_been_greeted                            Boolean       @default(false)
  sponsor_id                                  Int?
  needs_official_contact_email_verification   Boolean       @default(false)
  official_contact_email_verification_token   String?       @db.VarChar
  official_contact_email_verification_sent_at DateTime?     @db.Timestamptz(6)
  organizations                               organizations @relation(fields: [organization_id], references: [id], onDelete: NoAction)
  users_users_organizations_sponsor_idTousers users?        @relation("users_organizations_sponsor_idTousers", fields: [sponsor_id], references: [id], onUpdate: NoAction)
  users_users_organizations_user_idTousers    users         @relation("users_organizations_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, organization_id])
}
